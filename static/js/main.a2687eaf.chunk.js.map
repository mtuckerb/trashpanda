{"version":3,"sources":["lib/getAnswer.js","Flash.js","App.js","reportWebVitals.js","index.js"],"names":["checkAnswer","question_id","answer","callback","a","requestOptions","method","headers","Origin","mode","body","JSON","stringify","id","fetch","then","response","json","data","question","status","Flash","message","undefined","className","App","useState","setQuestion","questionId","setQuestionId","currentAnswer","setCurrentAnswer","error","setError","useEffect","onChange","e","target","value","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAqBeA,EArBE,uCAAG,WAAOC,EAAaC,EAAQC,GAA5B,eAAAC,EAAA,6DACZC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,yBACRC,KAAM,WAERC,KAAMC,KAAKC,UAAU,CAAEC,GAAIZ,EAAaC,OAAQA,KAGlDY,MACE,4EACAT,GAECU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLf,EAASe,EAAKC,SAAUD,EAAKL,GAAIK,EAAKE,WAjBxB,kBAmBX,IAnBW,2CAAH,0D,eCeFC,EAZD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OAAgB,OAAZA,GAAgC,KAAZA,QAA8BC,IAAZD,EAEtC,qBAAKT,GAAG,cAAcW,UAAU,qBAAhC,SACGF,IAIE,yBCkCIG,MAxCf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNP,EADM,KACIQ,EADJ,OAEuBD,mBAAS,GAFhC,mBAENE,EAFM,KAEMC,EAFN,OAG6BH,mBAAS,IAHtC,mBAGNI,EAHM,KAGSC,EAHT,OAIaL,mBAAS,IAJtB,mBAINM,EAJM,KAICC,EAJD,KAsBb,OANAC,qBAAU,WACRlC,EAAY4B,EAAYE,GAAe,SAACX,EAAUS,EAAYI,GAC5DL,EAAYR,GACZU,EAAcD,QAEf,IAED,sBAAKJ,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,+CACA,cAAC,EAAD,CAAOF,QAASU,IAChB,mCAAMb,EAAN,OACA,0BACEN,GAAIe,EACJO,SAAU,SAACC,GAAD,OAAOL,EAAiBK,EAAEC,OAAOC,UAE7C,uBACA,uBACA,wBAAQzB,GAAG,SAAS0B,QA3BE,WACxBN,OAASV,GACTvB,EAAY4B,EAAYE,GAAe,SAACX,EAAUS,EAAYI,GAC5DD,EAAiB,IACjBJ,EAAYR,GACZU,EAAcD,GACdK,EAASD,OAqBT,mCC1BSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAK1BZ,M","file":"static/js/main.a2687eaf.chunk.js","sourcesContent":["const checkAnswer = async (question_id, answer, callback) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Origin: \"https://localhost:3000\",\n      mode: \"no-cors\",\n    },\n    body: JSON.stringify({ id: question_id, answer: answer }),\n  };\n\n  fetch(\n    \"https://fezokn45b9.execute-api.us-west-1.amazonaws.com/default/trashPanda\",\n    requestOptions\n  )\n    .then((response) => response.json())\n    .then((data) => {\n      callback(data.question, data.id, data.status);\n    });\n  return [];\n};\nexport default checkAnswer;\n","import { useState } from \"react\";\nimport \"./Flash.css\";\n\nconst Flash = ({ message }) => {\n  if (message !== null && message !== \"\" && message !== undefined) {\n    return (\n      <div id=\"error-flash\" className=\"error hide-opacity\">\n        {message}\n      </div>\n    );\n  } else {\n    return <div></div>;\n  }\n};\n\nexport default Flash;\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport checkAnswer from \"./lib/getAnswer.js\";\nimport Flash from \"./Flash.js\";\n\nfunction App() {\n  const [question, setQuestion] = useState(\"\");\n  const [questionId, setQuestionId] = useState(1);\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleClick = () => () => {\n    setError(undefined);\n    checkAnswer(questionId, currentAnswer, (question, questionId, error) => {\n      setCurrentAnswer(\"\");\n      setQuestion(question);\n      setQuestionId(questionId);\n      setError(error);\n    });\n  };\n\n  useEffect(() => {\n    checkAnswer(questionId, currentAnswer, (question, questionId, error) => {\n      setQuestion(question);\n      setQuestionId(questionId);\n    });\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Trash Panda Online Scavenger Hunt</header>\n      <Flash message={error} />\n      <h1> {question} </h1>\n      <textarea\n        id={questionId}\n        onChange={(e) => setCurrentAnswer(e.target.value)}\n      ></textarea>\n      <br />\n      <br />\n      <button id=\"Submit\" onClick={handleClick()}>\n        Check Your Answer\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}